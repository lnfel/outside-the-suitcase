{"version":3,"file":"CanvasPool.CzGKFkc6.js","sources":["../../../../../../node_modules/.pnpm/pixi.js@8.1.8/node_modules/pixi.js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.mjs","../../../../../../node_modules/.pnpm/pixi.js@8.1.8/node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs"],"sourcesContent":["import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\n\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 0;\n  for (let i = 0; i < size; i++) {\n    uid = uid * 31 + textures[i].uid >>> 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\nlet maxTextures = 0;\nfunction generateTextureBatchBindGroup(textures, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  if (!maxTextures)\n    maxTextures = getMaxTexturesPerBatch();\n  for (let i = 0; i < maxTextures; i++) {\n    const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\n\nexport { getTextureBatchBindGroup };\n//# sourceMappingURL=getTextureBatchBindGroup.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n"],"names":["cachedGroups","getTextureBatchBindGroup","textures","size","uid","i","generateTextureBatchBindGroup","maxTextures","key","bindGroupResources","bindIndex","getMaxTexturesPerBatch","texture","Texture","bindGroup","BindGroup","CanvasPoolClass","canvasOptions","pixelWidth","pixelHeight","canvas","DOMAdapter","context","minWidth","minHeight","resolution","nextPow2","canvasAndContext","width","height","CanvasPool"],"mappings":"0GAKA,MAAMA,EAAe,CAAA,EACrB,SAASC,EAAyBC,EAAUC,EAAM,CAChD,IAAIC,EAAM,EACV,QAASC,EAAI,EAAGA,EAAIF,EAAME,IACxBD,EAAMA,EAAM,GAAKF,EAASG,CAAC,EAAE,MAAQ,EAEvC,OAAOL,EAAaI,CAAG,GAAKE,EAA8BJ,EAAUE,CAAG,CACzE,CACA,IAAIG,EAAc,EAClB,SAASD,EAA8BJ,EAAUM,EAAK,CACpD,MAAMC,EAAqB,CAAA,EAC3B,IAAIC,EAAY,EACXH,IACHA,EAAcI,EAAsB,GACtC,QAASN,EAAI,EAAGA,EAAIE,EAAaF,IAAK,CACpC,MAAMO,EAAUP,EAAIH,EAAS,OAASA,EAASG,CAAC,EAAIQ,EAAQ,MAAM,OAClEJ,EAAmBC,GAAW,EAAIE,EAAQ,OAC1CH,EAAmBC,GAAW,EAAIE,EAAQ,KAC3C,CACD,MAAME,EAAY,IAAIC,EAAUN,CAAkB,EAClD,OAAAT,EAAaQ,CAAG,EAAIM,EACbA,CACT,CCvBA,MAAME,CAAgB,CACpB,YAAYC,EAAe,CACzB,KAAK,YAA8B,OAAO,OAAO,IAAI,EACrD,KAAK,cAAgBA,GAAiB,GACtC,KAAK,iBAAmB,EACzB,CAMD,wBAAwBC,EAAYC,EAAa,CAC/C,MAAMC,EAASC,EAAW,IAAK,EAAC,aAAY,EAC5CD,EAAO,MAAQF,EACfE,EAAO,OAASD,EAChB,MAAMG,EAAUF,EAAO,WAAW,IAAI,EACtC,MAAO,CAAE,OAAAA,EAAQ,QAAAE,EAClB,CAQD,2BAA2BC,EAAUC,EAAWC,EAAa,EAAG,CAC9DF,EAAW,KAAK,KAAKA,EAAWE,EAAa,IAAI,EACjDD,EAAY,KAAK,KAAKA,EAAYC,EAAa,IAAI,EACnDF,EAAWG,EAASH,CAAQ,EAC5BC,EAAYE,EAASF,CAAS,EAC9B,MAAMhB,GAAOe,GAAY,KAAOC,GAAa,GACxC,KAAK,YAAYhB,CAAG,IACvB,KAAK,YAAYA,CAAG,EAAI,IAE1B,IAAImB,EAAmB,KAAK,YAAYnB,CAAG,EAAE,IAAG,EAChD,OAAKmB,IACHA,EAAmB,KAAK,wBAAwBJ,EAAUC,CAAS,GAE9DG,CACR,CAKD,uBAAuBA,EAAkB,CACvC,MAAMP,EAASO,EAAiB,OAC1B,CAAE,MAAAC,EAAO,OAAAC,CAAQ,EAAGT,EACpBZ,GAAOoB,GAAS,KAAOC,GAAU,GACvC,KAAK,YAAYrB,CAAG,EAAE,KAAKmB,CAAgB,CAC5C,CACD,OAAQ,CACN,KAAK,YAAc,EACpB,CACH,CACK,MAACG,EAAa,IAAId","x_google_ignoreList":[0,1]}