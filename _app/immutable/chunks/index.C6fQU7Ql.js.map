{"version":3,"file":"index.C6fQU7Ql.js","sources":["../../../../../../src/lib/google/sheets/index.ts"],"sourcesContent":["import type { sheets_v4 } from 'googleapis'\n\nexport function filterHeaders(headers: Sheet.RaidTitle[]) {\n    return headers.filter((cell) => cell as string !== \"\")\n}\n\nexport function parseSheetData(headers: Sheet.RaidTitle[], valueRanges?: sheets_v4.Schema$ValueRange[]): Sheet.RaidGroup<typeof headers[number]> {\n    const cellHeaders = [\n        \"Entry Tag\",\n        \"Entry Date\",\n        \"Username\",\n        \"Score\",\n        \"Portray\",\n        \"Resonance\",\n        \"Amplification\",\n        \"Name\"\n    ]\n    const entryMeta = cellHeaders.slice(0, 4) as (\"Entry Tag\" | \"Entry Date\" | \"Username\" | \"Score\")[]\n\n    return headers?.reduce((accumulator, header, index) => {\n        if (valueRanges?.[index]) {\n            const values: Sheet.Entry[][] = valueRanges[index].values?.reduce((rowAccumulator, row, rowIndex) => {\n                let entry: Record<typeof cellHeaders[number], any> = {}\n                const characters = [row.slice(4, 8), row.slice(8, 12), row.slice(12, 16), row.slice(16, 20)].map((characterData, characterIndex) => {\n                    let charaObject: Record<string, string> = {}\n                    charaObject[cellHeaders[4]] = characterData[0]\n                    charaObject[cellHeaders[5]] = characterData[1]\n                    charaObject[cellHeaders[6]] = characterData[2]\n                    charaObject[cellHeaders[7]] = characterData[3]\n                    return charaObject\n                })\n                entryMeta.forEach((meta, metaIndex) => {\n                    if (meta === 'Score') {\n                        row[metaIndex] = Number(row[metaIndex].replace(/,/g, ''))\n                    }\n                    if (meta === 'Entry Date') {\n                        row[metaIndex] = new Date(row[metaIndex])\n                    }\n                    entry[meta] = row[metaIndex]\n                })\n                entry.characters = characters\n                rowAccumulator.push(entry)\n                return rowAccumulator\n            }, []) ?? []\n\n            valueRanges[index].values = values\n            accumulator[header] = valueRanges[index] as Sheet.RaidData\n        }\n        return accumulator\n    }, {} as Sheet.RaidGroup<Sheet.RaidTitle>)\n}\n"],"names":["filterHeaders","headers","cell","parseSheetData","valueRanges","cellHeaders","entryMeta","accumulator","header","index","values","_a","rowAccumulator","row","rowIndex","entry","characters","characterData","characterIndex","charaObject","meta","metaIndex"],"mappings":"mGAEO,SAASA,EAAcC,EAA4B,CACtD,OAAOA,EAAQ,OAAQC,GAASA,IAAmB,EAAE,CACzD,CAEgB,SAAAC,EAAeF,EAA4BG,EAAsF,CAC7I,MAAMC,EAAc,CAChB,YACA,aACA,WACA,QACA,UACA,YACA,gBACA,MAAA,EAEEC,EAAYD,EAAY,MAAM,EAAG,CAAC,EAExC,OAAOJ,GAAA,YAAAA,EAAS,OAAO,CAACM,EAAaC,EAAQC,IAAU,OAC/C,GAAAL,GAAA,MAAAA,EAAcK,GAAQ,CAChB,MAAAC,IAA0BC,EAAAP,EAAYK,CAAK,EAAE,SAAnB,YAAAE,EAA2B,OAAO,CAACC,EAAgBC,EAAKC,IAAa,CACjG,IAAIC,EAAiD,CAAA,EAC/C,MAAAC,EAAa,CAACH,EAAI,MAAM,EAAG,CAAC,EAAGA,EAAI,MAAM,EAAG,EAAE,EAAGA,EAAI,MAAM,GAAI,EAAE,EAAGA,EAAI,MAAM,GAAI,EAAE,CAAC,EAAE,IAAI,CAACI,EAAeC,IAAmB,CAChI,IAAIC,EAAsC,CAAA,EAC1C,OAAAA,EAAYd,EAAY,CAAC,CAAC,EAAIY,EAAc,CAAC,EAC7CE,EAAYd,EAAY,CAAC,CAAC,EAAIY,EAAc,CAAC,EAC7CE,EAAYd,EAAY,CAAC,CAAC,EAAIY,EAAc,CAAC,EAC7CE,EAAYd,EAAY,CAAC,CAAC,EAAIY,EAAc,CAAC,EACtCE,CAAA,CACV,EACS,OAAAb,EAAA,QAAQ,CAACc,EAAMC,IAAc,CAC/BD,IAAS,UACLP,EAAAQ,CAAS,EAAI,OAAOR,EAAIQ,CAAS,EAAE,QAAQ,KAAM,EAAE,CAAC,GAExDD,IAAS,eACTP,EAAIQ,CAAS,EAAI,IAAI,KAAKR,EAAIQ,CAAS,CAAC,GAEtCN,EAAAK,CAAI,EAAIP,EAAIQ,CAAS,CAAA,CAC9B,EACDN,EAAM,WAAaC,EACnBJ,EAAe,KAAKG,CAAK,EAClBH,CAAA,EACR,CAAA,KAAO,GAEER,EAAAK,CAAK,EAAE,OAASC,EAChBH,EAAAC,CAAM,EAAIJ,EAAYK,CAAK,CAC3C,CACO,OAAAF,CACX,EAAG,CAAsC,EAC7C"}