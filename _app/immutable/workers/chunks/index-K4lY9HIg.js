const W=(g,D)=>{const{channel:w=0,samples:x=g.length,distance:n=50,length:e=100,top:c=0,left:r=0,type:C="steps",startdeg:z=0,enddeg:S=360,invertdeg:I=!1,invertpath:R=!1,paths:t=[{d:"Q",sdeg:0,sr:0,deg:50,r:100,edeg:100,er:0}],animation:V=!1,animationframes:q=10,normalize:B=!0}=D,G=K(g,w,V,q),N=T(G,x),P=B?U(N):N;let p="";const O=S<z?S+360:S,d=I?(z-O)/x:(O-z)/x,u=I?90+z+180:90+z,l=R?-1:1,Z=t.length,H=C=="mirror"?Z*2:Z,y=Math.PI/180,J=P.length;for(let Q=0;Q<J;Q++){if(Q>0){const i=p.length;p.charAt(i-1)==";"||i===0?p+=" M 0 0 ;":p+=";"}let b=-9999,v=-9999;for(let i=0;i<x;i++){const o=C!="bars"?i%2?1:-1:1;let a=1;for(let j=0;j<H;j++){let s=j;j>=Z&&(s=j-Z,a=-1),t[s].minshow=t[s].minshow??0,t[s].maxshow=t[s].maxshow??1,t[s].normalize=t[s].normalize??!1;const h=t[s].normalize?1:P[Q][i];if(t[s].minshow<=P[Q][i]&&t[s].maxshow>=P[Q][i])switch(t[s].d){case"L":{const m=(d*(i+t[s].sdeg/100)-u)*y,M=(d*(i+t[s].edeg/100)-u)*y,$=r+(e*(t[s].sr/100)*h*o*a*l+n)*Math.cos(m),_=c+(e*(t[s].sr/100)*h*o*a*l+n)*Math.sin(m),f=r+(e*(t[s].er/100)*h*o*a*l+n)*Math.cos(M),k=c+(e*(t[s].er/100)*h*o*a*l+n)*Math.sin(M);($!==b||_!==v)&&(p+=`M ${$} ${_} `),p+=`L ${f} ${k} `,b=f,v=k;break}case"C":{const m=(d*(i+t[s].sdeg/100)-u)*y,M=(d*(i+t[s].deg/100)-u)*y,$=(d*(i+t[s].edeg/100)-u)*y,_=r+(e*(t[s].sr/100)*h*o*a*l+n)*Math.cos(m),f=c+(e*(t[s].sr/100)*h*o*a*l+n)*Math.sin(m),k=r+(e*(t[s].r/100)*h*o*a*l+n)*Math.cos(M),F=c+(e*(t[s].r/100)*h*o*a*l+n)*Math.sin(M),L=r+(e*(t[s].er/100)*h*o*a*l+n)*Math.cos($),E=c+(e*(t[s].er/100)*h*o*a*l+n)*Math.sin($);(_!==b||f!==v)&&(p+=`M ${_} ${f} `),p+=`C ${_} ${f} ${k} ${F} ${L} ${E} `,b=L,v=E;break}case"Q":{const m=(d*(i+t[s].sdeg/100)-u)*y,M=(d*(i+t[s].deg/100)-u)*y,$=(d*(i+t[s].edeg/100)-u)*y,_=r+(e*(t[s].sr/100)*h*o*a*l+n)*Math.cos(m),f=c+(e*(t[s].sr/100)*h*o*a*l+n)*Math.sin(m),k=r+(e*(t[s].r/100)*h*o*a*l+n)*Math.cos(M),F=c+(e*(t[s].r/100)*h*o*a*l+n)*Math.sin(M),L=r+(e*(t[s].er/100)*h*o*a*l+n)*Math.cos($),E=c+(e*(t[s].er/100)*h*o*a*l+n)*Math.sin($);(_!==b||f!==v)&&(p+=`M ${_} ${f} `),p+=`Q ${k} ${F} ${L} ${E} `,b=L,v=E;break}case"A":{const m=(d*(i+t[s].sdeg/100)-u)*y,M=(d*(i+t[s].edeg/100)-u)*y,$=r+(e*(t[s].sr/100)*h*o*a*l+n)*Math.cos(m),_=c+(e*(t[s].sr/100)*h*o*a*l+n)*Math.sin(m),f=r+(e*(t[s].er/100)*h*o*a*l+n)*Math.cos(M),k=c+(e*(t[s].er/100)*h*o*a*l+n)*Math.sin(M);($!==b||_!==v)&&(p+=`M ${$} ${_} `);const F=d*i*t[s].angle/100,L=t[s].rx*d/100,E=t[s].ry*d/100;let A=t[s].sweep;o==-1&&(A==1?A=0:A=1),a==-1&&(A==1?A=0:A=1),p+=`A ${L} ${E} ${F} ${t[s].arc} ${A} ${f} ${k} `,b=f,v=k;break}case"Z":p+="Z ";break}}}}return p},K=(g,D,w,x)=>{const n=g.getChannelData(D),e=[];if(w){const c=g.sampleRate/x;for(let r=0;r<n.length;r+=c){const C=n.slice(r,r+c);e.push(C)}}else e.push(n);return e},T=(g,D)=>{const w=[],x=g.length;for(let n=0;n<x;n++){const e=Math.floor(g[n].length/D),c=[];for(let r=0;r<D;r++){let C=e*r,z=0;for(let S=0;S<e;S++)z=z+Math.abs(g[n][C+S]);c.push(z/e)}w.push(c)}return w},U=g=>{const D=[],w=g.length;for(let e=0;e<w;e++){const c=Math.max(...g[e]);D.push(c)}const x=Math.pow(Math.max(...D),-1),n=[];for(let e=0;e<w;e++){const c=g[e].map(r=>r*x);n.push(c)}return n};export{W as polarPath};
